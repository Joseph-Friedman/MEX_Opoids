GBD.prevalence.rate <- GBD %>% filter(measure_name == "Prevalence" & metric_name == "Rate")
GBD.death.number <- GBD %>% filter(measure_name == "Deaths" & metric_name == "Number")
GBD.prevalence.number <- GBD %>% filter(measure_name == "Prevalence" & metric_name == "Number")
#Summarise by state
GBD.prevalence.number.s <- GBD.prevalence.number %>% group_by(Estado) %>%
summarise(prevalence20.number = sum(val, na.rm = T))
GBD.death.number.s <- GBD.death.number %>% group_by(Estado) %>% summarise(death20.number = sum(val))
#Import weights and calculate palliative care need
GBD.weights <- read.csv("lancet_methods_table.csv")
colnames(GBD.weights)[4] <- "cause_name"
names(GBD.weights)
GBD.weights$Weight_palliative_care_need <-
round(as.numeric(as.character(GBD.weights$Weight_palliative_care_need)),3)
GBD.weights$Prop_need_opioid <-
round(as.numeric(as.character(GBD.weights$Prop_need_opioid)),3)
GBD.weights$Days_opioid <-
round(as.numeric(as.character(GBD.weights$Days_opioid)),3)
GBD.weights$Morphine <-
round(as.numeric(as.character(GBD.weights$Morphine)),3)
GBD.weights.prevalence <- GBD.weights %>% filter(Death.Prevalence == "Prevalence")
GBD.weights.death <- GBD.weights %>% filter(Death.Prevalence == "Death")
GBD.death.number.w <- GBD.death.number %>% left_join(GBD.weights.death, by = "cause_name")
GBD.death.number.w <- GBD.death.number.w %>%
mutate(Opioid.need = val * Weight_palliative_care_need * Prop_need_opioid *
Days_opioid * Morphine)
GBD.prevalence.number.w <- GBD.prevalence.number %>% left_join(GBD.weights.prevalence, by = "cause_name")
GBD.prevalence.number.w <- GBD.prevalence.number.w %>%
mutate(Opioid.need = val * Weight_palliative_care_need * Prop_need_opioid *
Days_opioid * Morphine)
GBD.opioid.score <- rbind(GBD.prevalence.number.w, GBD.death.number.w)
GBD.opioid.sum <- GBD.opioid.score %>% spread(cause_name, Opioid.need)
GBD.opioid.sum <- GBD.opioid.sum %>% dplyr::select(c(2,22:48)) %>%
group_by(Estado) %>% summarise_all(sum, na.rm = T)
GBD.opioid.sum <- GBD.opioid.sum %>% dplyr::select(!c(`Acute glomerulonephritis`, `African trypanosomiasis`,
Asthma, `Idiopathic epilepsy`, `Neonatal preterm birth`,
Schistosomiasis))
df.poblacion <- df.poblacion %>% filter(!Estado == "ADOS UNIDOS MEXICANOS") %>%
mutate(Estado = str_to_title(Estado))
GBD.opioid.sum <- GBD.opioid.sum %>% mutate(Estado = str_to_title(Estado))
GBD.opioid.sum.stand <- GBD.opioid.sum
GBD.opioid.sum.stand[2:22] <- lapply(GBD.opioid.sum.stand[2:22], function(x) {
y<-scale(x, center=TRUE, scale=TRUE)
}
)
#Create percapita
GBD.opioid.sum <- merge(x = GBD.opioid.sum, y = df.poblacion, by = "Estado")
GBD.opioid.sum.capita <- GBD.opioid.sum %>% dplyr::mutate_if(is.numeric, ~ ./Poblacion)
GBD.opioid.sum.capita.stand <- GBD.opioid.sum.capita %>% mutate_if(is.numeric, scale)
#Create overall score
GBD.opioid.score <- GBD.opioid.score %>% group_by(Estado) %>%
summarise(Opioid.need = sum(Opioid.need, na.rm = TRUE))
#Heatmap by overall need
names(GBD.opioid.sum.stand) <- c("Estado", "Dementias", "Cardiovascular",
"Kidney",
"Respiratory", "Liver",
"Congenital", "Encephalitis", "HIV/AIDS", "Injuries",
"Measles", "Multiple sclerosis", "Musculoskeletal",
"Neoplasms", "Digestive", "Neurological",
"Parkinson's", "Malnutrition", "Rabies",
"Syphilis", "Tetanus", "Tuberculosis")
GBD.opioid.sum.stand_long <- GBD.opioid.sum.stand %>% gather(Disease, Value, 2:22, factor_key=TRUE)
GBD.opioid.heat <- ggplot(GBD.opioid.sum.stand_long, aes(x = Disease, y = Estado, fill = Value)) +
geom_tile(colour = "white", size = 1) +
scale_fill_continuous_sequential(name="Standardized opioid need", palette = "Heat") +
scale_x_discrete(name = "Disease") +
scale_y_discrete(name = "Federal entity") +
theme_minimal() +
theme(legend.position = "bottom", legend.key.width = unit(2, "cm"),
panel.grid = element_blank()) +
theme(text = element_text(size = 14)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
coord_equal() +
labs(title = "Standardized total opioid need")
GBD.opioid.heat
# Heatmap by standardized need per capita
names(GBD.opioid.sum.capita.stand) <- c("Estado", "Dementias", "Cardiovascular",
"Kidney",
"Respiratory", "Liver",
"Congenital", "Encephalitis", "HIV/AIDS", "Injuries",
"Measles", "Multiple sclerosis", "Musculoskeletal",
"Neoplasms", "Digestive", "Neurological",
"Parkinson's", "Malnutrition", "Rabies",
"Syphilis", "Tetanus", "Tuberculosis")
GBD.opioid.sum.capita.stand_long <- GBD.opioid.sum.capita.stand %>% gather(Disease, Value, 2:22, factor_key=TRUE)
GBD.opioid.sum.capita.stand_long$Estado <- factor(GBD.opioid.sum.capita.stand_long$Estado)
GBD.opioid.sum.capita.stand_long$Disease <- factor(as.character(GBD.opioid.sum.capita.stand_long$Disease))
GBD.opioid.heat.capita <- ggplot(GBD.opioid.sum.capita.stand_long,
aes(x = Disease, y = Estado,
fill = Value)) +
geom_tile(colour = "white", size = 1) +
scale_fill_continuous_sequential(name="Standardized opioid need", palette = "Heat") +
scale_x_discrete(name = "Disease group") +
scale_y_discrete(name = "Federal entity", limits = rev(levels(GBD.opioid.sum.capita.stand_long$Estado))) +
theme_minimal() +
theme(legend.position = "bottom", legend.key.width = unit(2, "cm"),
panel.grid = element_blank()) +
theme(text = element_text(size = 14)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
#labs(title = "Standardized opioid need per capita by federal entity in Mexico") +
coord_equal()
GBD.opioid.heat.capita
ggsave("Images/opiod_need_capita_state.png",
dpi = 320, height = 8, width = 10)
#Import demographic data for State regression
#Marginalization - SES
Marginalization.2015 <- readOGR("IMEF_2015/IME2015.shp")
Marginalization.2015 <- Marginalization.2015@data
colnames(Marginalization.2015)[2] <- "Estado"
Marginalization.2015$Estado <- stri_trans_general(str = Marginalization.2015$Estado, id = "Latin-ASCII")
Marginalization.2015$IME <- stri_trans_general(str = Marginalization.2015$IME, id = "Latin-ASCII")
Marginalization.2015 <- Marginalization.2015 %>%
mutate(Estado = ifelse(Estado %in% "Distrito Federal", "Ciudad de Mexico", Estado))
Marginalization.2015 <- Marginalization.2015 %>%
mutate(Estado = ifelse(Estado %in% "Coahuila", "Coahuila de Zaragoza", Estado))
Marginalization.2015 <- Marginalization.2015 %>%
mutate(Estado = ifelse(Estado %in% "Coahuila de Zaragoza", "Coahuila de Zaragoza", Estado))
Marginalization.2015 <- Marginalization.2015 %>%
mutate(Estado = ifelse(Estado %in% "Veracruz", "Veracruz De Ignacio De La Llave", Estado))
Marginalization.2015 <- Marginalization.2015 %>%
mutate(Estado = ifelse(Estado %in% "Aguas  Calientes", "Aguascalientes", Estado))
Marginalization.2015 <- Marginalization.2015 %>%
mutate(Estado = ifelse(Estado %in% "Michoac", "Michoacan de Ocampo", Estado))
Marginalization.2015$IME <- as.numeric(Marginalization.2015$IME)
Marginalization.2015 <- Marginalization.2015 %>% dplyr::select(Estado, IME, GME)
#Align population labels for merge
df.poblacion <- df.poblacion %>%
mutate(Estado = ifelse(Estado %in%  "Veracruz De Ignacio De La Llave",
"Veracruz de Ignacio de la Llave", Estado))
df.poblacion <- df.poblacion %>%
mutate(Estado = ifelse(Estado %in%  "Coahuila De Zaragoza", "Coahuila de Zaragoza",
Estado))
df.poblacion <- df.poblacion %>%
mutate(Estado = ifelse(Estado %in%  "Ciudad De Mexico", "Ciudad de Mexico",
Estado))
df.poblacion <- df.poblacion %>%
mutate(Estado = ifelse(Estado %in%  "Michoacan De Ocampo", "Michoacan de Ocampo",
Estado))
#Merge to one dataset
df.r <- merge(x=Marginalization.2015, y=df.poblacion, by="Estado", all.x=T)
df.r <- merge(x=df.r, y=GBD.opioid.score, by="Estado", all.x=T)
df.r$Estado1 <- df.r$Estado
df.r$Estado <- str_to_upper(df.r$Estado)
#df.r$Estado <- sub('[^A-Za-z]+', '', df.r$Estado)
df.r$Estado <- stri_trans_general(str = df.r$Estado, id = "Latin-ASCII")
#Calculate rates
df.r <- df.r %>% mutate(opioid.need_capita = Opioid.need/Poblacion)
df.year.total <- df.year.estado %>% group_by(Estado) %>% summarise(total_n = sum(total_n))
df.year.estado.r <- merge(x=df.year.total, y=df.r, by="Estado", all.x=T)
#Pull region/gender
df_mxstate <- df_mxstate %>% mutate(Estado = ifelse(Estado %in% "DISTRITO FEDERAL", "CIUDAD DE MEXICO", Estado))
df_mxstate <- df_mxstate %>% mutate(Estado = ifelse(Estado %in% "Ciudad de Mexico", "CIUDAD DE MEXICO", Estado))
df.year.estado.r <- merge(x=df.year.estado.r, y=df_mxstate, by="Estado", all.x=T)
#Methadone clinics
methadone <- read.csv("cofepris_methadone.csv")
methadone$Estado <- stri_trans_general(str = methadone$Estado, id = "Latin-ASCII")
methadone <- methadone %>% group_by(Estado) %>% summarise(methadone.clinics = n())
methadone <- methadone %>% mutate(Estado = ifelse(Estado %in% "Ciudad de Mexico", "CIUDAD DE MEXICO", Estado))
methadone <- methadone %>% mutate(Estado = ifelse(Estado %in% "BAJA\nCALIFORNIA", "BAJA CALIFORNIA", Estado))
methadone <- methadone %>% drop_na
methadone <- methadone %>% mutate(methadone_dico = case_when(methadone.clinics >= 0 ~ 1,
methadone.clinics <0 ~ 0))
df.year.estado.r <- merge(x=df.year.estado.r, y=methadone, by="Estado", all.x=T)
df.year.estado.r$methadone.clinics <- df.year.estado.r$methadone.clinics %>% replace_na(0)
df.year.estado.r <- df.year.estado.r %>% mutate(methadone_dico = case_when(methadone.clinics > 0 ~ 1,
methadone.clinics == 0 ~ 0))
df.year.estado.r <- df.year.estado.r %>% mutate(opioid_rate = total_n/Poblacion * 10000)
#Standardize marginalization index/opioid need scale
df.year.estado.r$IME_stand <- scale(df.year.estado.r$IME, center = TRUE, scale = TRUE)
df.year.estado.r$opioid.need_stand <- scale(df.year.estado.r$opioid.need_capita, center = TRUE, scale = TRUE)
#Regression models
#Regression - negative binomial
label(df.year.estado.r$opioid.need_capita) <- "Opioid need per capita"
label(df.year.estado.r$opioid.need_stand) <- "Standardized opioid need"
label(df.year.estado.r$IME) <- "Socioeconomic status"
label(df.year.estado.r$methadone.clinics) <- "Methadone clinics (per number of licensed clinics)"
label(df.year.estado.r$methadone_dico) <- "Methadone clinics (yes/no)"
df.year.estado.r$GME <- recode_factor(df.year.estado.r$GME,
`Muy alto` = "Very low", Alto = "Low", Medio = "Medium",
Bajo = "High", `Muy bajo` = "Very high")
df.year.estado.r$IME <- df.year.estado.r$IME*-1
dv.labels <- c("Model 1", "Model 2", "Model 3")
m.nb1 <- glm.nb(total_n ~ opioid.need_capita +
offset(log(Poblacion)),
data=df.year.estado.r)
m.nb2 <- glm.nb(total_n ~ opioid.need_capita +
IME +
offset(log(Poblacion)),
data=df.year.estado.r)
m.nb3 <- glm.nb(total_n ~ opioid.need_capita + IME +
methadone.clinics +
offset(log(Poblacion)),
data=df.year.estado.r)
tab_model(m.nb1, m.nb2, m.nb3, show.intercept = F, dv.labels = dv.labels,
title = "Negative binomial models of opioid dispensing rates
for federal entities in Mexico between August 2015 and October 2019",
string.est = "IRR", digits.p = 2, digits = 3)
m.nb1.cat <- glm.nb(total_n ~ opioid.need_capita +
offset(log(Poblacion)),
data=df.year.estado.r)
m.nb2.cat <- glm.nb(total_n ~ opioid.need_capita +
GME +
offset(log(Poblacion)),
data=df.year.estado.r)
m.nb3.cat <- glm.nb(total_n ~ opioid.need_capita + GME +
methadone.clinics +
offset(log(Poblacion)),
data=df.year.estado.r)
tab_model(m.nb1.cat, m.nb2.cat, m.nb3.cat, show.intercept = F, dv.labels = dv.labels,
title = "Negative binomial models of opioid dispensing rates
for federal entities in Mexico between August 2015 and October 2019",
string.est = "IRR", digits.p = 2, digits = 3)
glm.diag.plots(m.nb1)
glm.diag.plots(m.nb2)
glm.diag.plots(m.nb3)
#Residuals and Predicted Rate
residuals.nb <- residuals(m.nb1, type = c("response"))
df.year.estado.r$residuals <- residuals.nb
df.year.estado.r <- df.year.estado.r %>% mutate(residuals.qual = case_when(residuals <= 0 ~ "Negative",
residuals > 0 ~ "Positive"))
#Compare fitted/predicted to observed rates
fitted.nb <- fitted(m.nb1)
residuals.nb
p.scatter <- ggplot(data = df.year.estado.r, aes(y = opioid_rate, x = fitted_rate,
size = Poblacion,
label = state_abbr)) +
#geom_hline(yintercept = median(df.year.estado.r$fitted_rate), colour="black") +
#geom_vline(xintercept = median(df.year.estado.r$opioid_rate), colour="black") +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "longdash", alpha = 0.8) +
#geom_smooth(method = glm.nb, se = F, color = "red", linetype = "longdash", alpha = 0.5) +
geom_point(shape = 21, color = "black", aes(fill = GME)) +
scale_y_continuous(name = "Observed rate dispensed per 10,000", trans = "log",
breaks = c(0, 1, 10, 30, 100, 300),
limits = c(5, 300)) +
scale_x_continuous(name = "Predicted rate based on estimated opioid need per 10,000", trans = "log",
breaks = c(0, 1, 10, 30, 100, 300),
limits = c(5, 300)) +
scale_fill_discrete_sequential(palette = "Heat", order = c(5:1),
name = "Socioeconomic status") +
scale_size(name = "Population", range = c(3, 7), guide = F) +
geom_label_repel(show.legend = FALSE, fill = "white", aes(color = GME), force = 10) +
scale_color_discrete_sequential(palette = "Heat", order = c(5:1),
name = "", guide = F) +
theme_minimal() +
theme(text = element_text(size = 14)) +
#labs(caption = "Axis are on a log scale.\n
#Horizontal and vertial lines are at the median values for each axis.\n
#Diagonal dashed red line is the line of equality based on the negative binomial model.\n
#Circle size is proportional to the states population.") +
guides(fill = guide_legend(override.aes = list(size=6)))
p.scatter
ggsave("Images/opiod_need_x_y.png",
dpi = 320, height = 8, width = 10)
df.year.estado.r$residuals_stand <- scale(df.year.estado.r$residuals/df.year.estado.r$Poblacion,
center = T, scale = T)
pos <- position_jitter(width = 0.1, seed = 1)
p.residual <- ggplot(df.year.estado.r, aes(fill = GME, y = residuals_stand, x = GME, label = state_abbr)) +
geom_hline(yintercept=0, colour="red", linetype = "longdash", alpha = 0.5) +
geom_jitter(size = 3, shape = 21, color = "black",
position = pos) +
scale_fill_discrete_sequential(name="", palette = "Heat", order = c(5:1), guide = F) +
geom_label_repel(show.legend = FALSE, fill = "white", aes(color = GME), force = 5,
position = pos) +
scale_color_discrete_sequential(name="", palette = "Heat", order = c(5:1), guide = F) +
labs(x = "Socioeconomic status", y = "Standardized residuals") +
theme_minimal() +
theme(text = element_text(size = 14))
p.residual
ggsave("Images/bar_residuals.png", dpi = 300, width = 5, height = 4)
p.bar.oe <- ggplot(df.year.estado.r, aes(fill = GME, y = observed.expected, x = GME, label = state_abbr)) +
geom_hline(yintercept=0, colour="red", linetype = "longdash", alpha = 0.5) +
#geom_bar(position = "dodge", stat = "summary", fun.y = "mean") +
geom_boxplot(outlier.shape=21,
outlier.size=3) +
scale_fill_discrete_sequential(name="", palette = "Heat", order = c(5:1), guide = F) +
labs(x = "Socioeconomic status",
y = "Percentage of observed/expected\nopioid dispensing") +
theme_minimal() +
theme(text = element_text(size = 14))
p.bar.oe
by(df.year.estado.r$observed.expected, df.year.estado.r$GME, median)
by(df.year.estado.r$observed.expected, df.year.estado.r$GME, mean)
#Figure 1}
#Combine scatter, residual and legend
plots <- plot_grid(p.scatter + theme(legend.position="none"), p.bar.oe, align = 'v', axis = 'l',
labels = c("A", "B"))
plots
ggsave("Images/combined_scatter_residual.png",
dpi = 300,
width = 10, height = 6)
#Observed/Expected Plot - Supplemental Figure 6}
#Plot O/E
df.year.estado.r$value <- df.year.estado.r$observed.expected
df.year.estado.r  <- df.year.estado.r  %>% mutate(value_type = case_when(value >= 0 ~ "above",
value <0 ~ "below"))
#Diverging dot plot
ggplot(df.year.estado.r, aes(x=reorder(Estado1, value), y=value, label=round(value,1))) +
new_scale_color() +
geom_point(stat='identity', aes(col=as.factor(value_type)), size=8)  +
scale_color_discrete_diverging(palette = "Red-Green", guide = F) +
#  scale_color_manual(name="",
#                   labels = c("Above expected", "Below expected"),
#                   values = c("above"="#00ba38", "below"="#f8766d")) +
geom_hline(yintercept = 0, color = "red", alpha = 0.8, linetype = "longdash") +
geom_text(color="white", size=2) +
labs(#title = "Percentage of observed over expected opioid dispensing rate",
x = "Federal entity",
y = "Percentage of observed group I opioid dispensing rate\nabove or below expected dispensing rate") +
ylim(-100, 250) +
coord_flip() + theme(text = element_text(size=16)) +
theme_minimal()
ggsave("Images/diverging_bar.png", dpi = 300, width = 6, height = 8)
install.packages("waffle", repos = "https://cinc.rud.is")
# == General == #
pacman::p_load(data.table,tidyverse),stringr,stringi,DT,expss,reshape,reshape2,readxl,hablar,skimr,lubridate,ggridges,waffle,magrittr,colorspace)
# == General == #
pacman::p_load(data.table,tidyverse,stringr,stringi,DT,expss,reshape,reshape2,readxl,hablar,skimr,lubridate,ggridges,waffle,magrittr,colorspace)
pacman::p_load(data.table,tidyverse,stringr,stringi,DT,expss,reshape,reshape2,readxl,hablar,skimr,lubridate,ggridges,waffle,magrittr,colorspace)
rm(list = ls())
pacman::p_load(data.table,tidyverse,stringr,stringi,DT,expss,reshape,reshape2,readxl,hablar,skimr,lubridate,ggridges,waffle,magrittr,colorspace)
rm(list = ls())
pacman::p_load(data.table,tidyverse,stringr,stringi,DT,expss,reshape,reshape2,readxl,hablar,skimr,lubridate,ggridges,waffle,magrittr,colorspace)
#r Import data
df <- read_excel('anexo-15118-19.xlsx', sheet = 2)
colnames(df)[3] <- "Date"
colnames(df)[4] <- "Med"
df %>% distinct(Med)
#Match brand names to generic names
df <- df %>% mutate(Med2 = ifelse(agrepl("dormicum", Med, ignore.case=T, max.distance=0.1), "Midazolam",
ifelse(agrepl("panazeclox", Med, ignore.case=T, max.distance=0.1), "Clonazepam",
ifelse(agrepl("OPÉRATIVÁN", Med, ignore.case=T, max.distance=0.1), "Ativan",
ifelse(agrepl("OPERATIAVAN", Med, ignore.case=T, max.distance=0.1), "Ativan",
ifelse(agrepl("tafil", Med, ignore.case=T, max.distance=0.0), "Alprazolam",
Med))))))
df <- df %>% mutate(Med2 = ifelse(agrepl("fentanilo", Med, ignore.case=T, max.distance=0.1), "Fentanyl",
ifelse(agrepl("fenta", Med, ignore.case=T, max.distance=0.1), "Fentanyl",
ifelse(agrepl("torafen", Med, ignore.case=T, max.distance=0.1), "Fentanyl",
ifelse(agrepl("filtaten", Med, ignore.case=T, max.distance=0.1), "Fentanyl",
ifelse(agrepl("filtanten", Med, ignore.case=T, max.distance=0.1), "Fentanyl",
ifelse(agrepl("durogesic", Med, ignore.case=T, max.distance=0.1), "Fentanyl",
ifelse(agrepl("durogesig", Med, ignore.case=T, max.distance=0.1), "Fentanyl",
ifelse(agrepl("Fenodid", Med, ignore.case=T, max.distance=0.1), "Fentanyl",
ifelse(agrepl("Utranil", Med, ignore.case=T, max.distance=0.1), "Fentanyl",
ifelse(agrepl("DURAGESIG", Med, ignore.case=T, max.distance=0.1), "Fentanyl",
ifelse(agrepl("zuftil", Med, ignore.case=T, max.distance=0.1), "Sufentanyl",
ifelse(agrepl("ultiva", Med, ignore.case=T, max.distance=0.1), "Remifentanyl",
ifelse(agrepl("morfina", Med, ignore.case=T, max.distance=0.1), "Morphine",
ifelse(agrepl("analfin", Med, ignore.case=T, max.distance=0.1), "Morphine",
ifelse(agrepl("anlafin", Med, ignore.case=T, max.distance=0.1), "Morphine",
ifelse(agrepl("anlfin", Med, ignore.case=T, max.distance=0.1), "Morphine",
ifelse(agrepl("ANAFLIN", Med, ignore.case=T, max.distance=0.1), "Morphine",
ifelse(agrepl("graten", Med, ignore.case=T, max.distance=0.1), "Morphine",
ifelse(agrepl("garten", Med, ignore.case=T, max.distance=0.1), "Morphine",
ifelse(agrepl("biogenfine", Med, ignore.case=T, max.distance=0.1), "Morphine",
ifelse(agrepl("metadona", Med, ignore.case=T, max.distance=0.1), "Methadone",
ifelse(agrepl("me tadona", Med, ignore.case=T, max.distance=0.1), "Methadone",
ifelse(agrepl("metadota", Med, ignore.case=T, max.distance=0.1), "Methadone",
ifelse(agrepl("metadon", Med, ignore.case=T, max.distance=0.1), "Methadone",
ifelse(agrepl("metano", Med, ignore.case=T, max.distance=0.1), "Methadone",
ifelse(agrepl("metadora", Med, ignore.case=T, max.distance=0.1), "Methadone",
ifelse(agrepl("met adona", Med, ignore.case=T, max.distance=0.1), "Methadone",
ifelse(agrepl("amidone", Med, ignore.case=T, max.distance=0.1), "Methadone",
ifelse(agrepl("AMDIONE", Med, ignore.case=T, max.distance=0.1), "Methadone",
ifelse(agrepl("metadina", Med, ignore.case=T, max.distance=0.1), "Methadone",
ifelse(agrepl("rubidexol", Med, ignore.case=T, max.distance=0.1), "Methadone",
ifelse(agrepl("MTEADONA", Med, ignore.case=T, max.distance=0.1), "Methadone",
ifelse(agrepl("oxicodona", Med, ignore.case=T, max.distance=0.1), "Oxycodone",
ifelse(agrepl("plexicodim", Med, ignore.case=T, max.distance=0.1), "Oxycodone",
ifelse(agrepl("endocodil", Med, ignore.case=T, max.distance=0.1), "Oxycodone",
ifelse(agrepl("endocidil", Med, ignore.case=T, max.distance=0.1), "Oxycodone",
ifelse(agrepl("ENDODOCIL", Med, ignore.case=T, max.distance=0.1), "Oxycodone",
ifelse(agrepl("oxicontyn", Med, ignore.case=T, max.distance=0.1), "Oxycodone",
ifelse(agrepl("oxicotin", Med, ignore.case=T, max.distance=0.1), "Oxycodone",
ifelse(agrepl("oxycotin", Med, ignore.case=T, max.distance=0.1), "Oxycodone",
ifelse(agrepl("oxyc", Med, ignore.case=T, max.distance=0.1), "Oxycodone",
ifelse(agrepl("oxicotin", Med, ignore.case=T, max.distance=0.1), "Oxycodone",
ifelse(agrepl("OXYNCON", Med, ignore.case=T, max.distance=0.1), "Oxycodone",
ifelse(agrepl("oyicontin", Med, ignore.case=T, max.distance=0.1), "Oxycodone",
ifelse(agrepl("OXICINTIN", Med, ignore.case=T, max.distance=0.1), "Oxycodone",
ifelse(agrepl("TARGINIQ", Med, ignore.case=T, max.distance=0.1), "Oxycodone",
ifelse(agrepl("TARGINIC", Med, ignore.case=T, max.distance=0.1), "Oxycodone",
Med2))))))))))))))))))))))))))))))))))))))))))))))))
df <- df %>% mutate(Med2 = ifelse(agrepl("temgesic", Med, ignore.case=T, max.distance=0.1), "Buprenorphine",
ifelse(agrepl("transtec", Med, ignore.case=T, max.distance=0.1), "Buprenorphine",
ifelse(agrepl("soloro", Med, ignore.case=T, max.distance=0.1), "Buprenorphine",
ifelse(agrepl("bupr", Med, ignore.case=T, max.distance=0.1), "Buprenorphine",
ifelse(agrepl("tergenic", Med, ignore.case=T, max.distance=0.1), "Buprenorphine",
ifelse(agrepl("Tylex", Med, ignore.case=T, max.distance=0.1), "Codeine",
ifelse(agrepl("tapentadol", Med, ignore.case=T, max.distance=0.1), "Tapentadol",
ifelse(agrepl("palexia", Med, ignore.case=T, max.distance=0.1), "Tapentadol",
ifelse(agrepl("plexia", Med, ignore.case=T, max.distance=0.1), "Tapentadol",
ifelse(agrepl("paleexia", Med, ignore.case=T, max.distance=0.1), "Tapentadol",
ifelse(agrepl("pal", Med, ignore.case=T, max.distance=0.1), "Tapentadol",
ifelse(agrepl("himop", Med, ignore.case=T, max.distance=0.1), "Hydromorphone",
ifelse(agrepl("hidromorfona", Med, ignore.case=T, max.distance=0.1), "Hydromorphone",
Med2))))))))))))))
df <- df %>% transform(Med3=replace(Med2, !(Med2 %in% c("Fentanyl","Tapentadol",
"Codeine", "Oxycodone", "Hydromorphone",
"Methadone", "Morphine", "Sufentanyl", "Remifentanyl",
"Ativan", "Clonazepam", "Midazolam", "Buprenorphine",
"Alprazolam")), NA))
df <- df %>% mutate(Med4=case_when(Med3 == "Fentanyl" ~ "Fentanyl",
Med3 == "Tapentadol" ~ "Tapentadol",
Med3 == "Oxycodone" ~ "Oxycodone",
Med3 == "Hydromorphone" ~ "Hydromorphone",
Med3 == "Methadone" ~ "Methadone",
Med3 == "Morphine" ~ "Morphine",
Med3 == "Sufentanyl" ~ "Fentanyl",
Med3 == "Remifentanyl" ~ "Fentanyl"))
df <- df %>% mutate(day=date(Date))
df <- df %>% mutate(month=month(day))
df <- df %>% mutate(year=year(day))
df$year <- as.factor(df$year)
df$month <- as.factor(df$month)
write.csv(df, '200228_COFEPRIS_medications.csv')
#r Data Wrangle}
##Data wrangle for density plots
#install.packages("waffle", repos = "https://cinc.rud.is")
df <- read.csv('200228_COFEPRIS_medications.csv')
df %>% group_by(Med2) %>% tally()
df %>% group_by(Med3) %>% tally()
df.tally <- df %>% group_by(Med4) %>% tally()
df.tally <- df.tally %>% mutate(n.1000 = n/1000)
df.tally <- df.tally %>% mutate(perc = n/sum(n)*100)
df$Med4 <- fct_explicit_na(df$Med4)
df.tally.month <- df %>% group_by(month, year, Med4) %>% tally() %>% arrange(year, month)
df.tally.month <- df.tally.month %>% mutate(Quarter.id = recode(month, 1:3 ~ 1,
4:6 ~ 2,
7:9 ~ 3,
10:12 ~ 4))
df.tally.month$Quarter.year <- paste0(as.character(df.tally.month$year),"-", as.character(df.tally.month$Quarter.id))
df.tally.month$poblacion <- 119530753
df.tally.month <- df.tally.month %>% mutate(Rate = n/poblacion * 1000000)
#Calculate growth
df.tally.month <- df.tally.month %>%
group_by(Med4) %>%
arrange(Quarter.year, .by_group=T) %>%
mutate(Growth.percent = Rate/first(Rate) * 100)
#Calculate percent change
df.tally.month <- df.tally.month %>%
group_by(Med4) %>%
arrange(Quarter.year, .by_group=T) %>%
mutate(pct_change = (Rate/lag(Rate) - 1) * 100)
df.tally.month$pct_change <- round(df.tally.month$pct_change,1)
df.tally.month$Medication <- df.tally.month$Med4
df.tally.month$Medication_num <- df.tally.month %>% group_by(Medication) %>% group_indices
df.tally.month <- df.tally.month %>% arrange(Quarter.year)
df.tally.month <- df.tally.month %>% filter(!Quarter.year %in% c("2015-2", "2019-4"))
df.tally.month$Quarter_num <- df.tally.month %>% group_by(Quarter.year) %>% group_indices
df.quarter <- df.tally.month %>% group_by(Medication, Quarter.year) %>% summarise(n = sum(n), poblacion = min(poblacion))
df.quarter$Medication_num <- df.quarter %>% group_by(Medication) %>% group_indices
df.quarter$Quarter_num <- df.quarter %>% group_by(Quarter.year) %>% group_indices
df.quarter <- df.quarter %>% mutate(Rate = n/poblacion * 1000000)
df.quarter <- df.quarter %>% filter(!Medication == "(Missing)")
df.quarter <- df.quarter %>% arrange(Medication_num, Quarter_num)
write.csv(df.quarter,
'200228_COFEPRIS_medications_quarter.csv')
df.filter <- df %>% filter(!is.na(Med4))
df.filter <- df.filter %>% filter(!Med4 %in% "(Missing)")
df.filter <- df.filter %>% filter(Med4!="Codeine")
df.filter <- df.filter %>% mutate(Med4 = factor(Med4, levels = rev(c("Tapentadol", "Oxycodone", "Morphine",
"Methadone", "Hydromorphone", "Fentanyl"))))
aqpc.med <- read_excel("COFEPRIS_medication_output.xlsx",
sheet = 4)
aqpc.med$`"Medication"` <- c("Fentanyl", "Hydromorphone", "Methadone", "Morphine", "Oxycodone", "Tapentadol")
colnames(aqpc.med)[1] <- "Med4"
colnames(aqpc.med)[6] <- "AQPC"
colnames(aqpc.med)[7] <- "Lower"
colnames(aqpc.med)[8] <- "Upper"
#aqpc.med <- aqpc.med %>% select(Medication, AQPC, Lower, Upper)
df.filter <- merge(x = df.filter, y = aqpc.med, by = "Med4", all.x = T)
paste0(aqpc.med$Med4, " AQPC ", aqpc.med$AQPC, " (95% CI ", aqpc.med$Lower, " - ", aqpc.med$Upper, ")")
#r Waffle Plot}
ggplot(df.tally, (aes(fill=Med4, values=n.1000))) +
geom_waffle(color="white", size=1, n_rows=10) +
labs(#title = "Figure 1. Number of prescriptions in COFEPRIS database",
caption = "Each square is equal to 1,000 prescriptions./n
Hydromorphone was not displayed as the sum of prescriptions was less than 1,000.",
fill = "Medication") +
coord_equal() +
scale_fill_discrete_qualitative(palette = "Dark 3") +
theme_minimal() +
theme_enhance_waffle() +
theme(plot.title = element_text(hjust = 0.5))
ggsave("Images/Figure 2 - Waffle.png", dpi = 300)
#r Density Plot
#Density plot
ggplot(df.filter %>% filter(!Med4 == "Hydromorphone"), aes(x=day, group=Med4, fill=Med4)) +
geom_density(adjust=1.0, alpha=.4) +
facet_wrap(~Med4, ncol = 2, strip.position = c("bottom")) +
labs(x="Year", y="Density", title = "Figure 2. Density of dispensed narcotic prescriptions in Mexico") +
theme_void() +
theme(legend.position = "none") +
scale_fill_discrete_qualitative(palette = "Dark 3") +
theme(plot.title = element_text(hjust = 0.5))
ggsave("/Users/davigood/Box Sync/UCLA/2017_Opioids Mexico/COFEPRIS/Images/Figure 2 - Densities.png", dpi = 300)
ggsave("Images/Figure 2 - Densities.png", dpi = 300)
#Ridge plot
ggplot(df.filter, aes(x=day, y=Med4, group=Med4, fill=stat(x))) +
geom_density_ridges_gradient(scale = 2, size = 0.50, rel_min_height = 0.03) +
theme_minimal() +
#scale_x_date(date_breaks = "1 year", date_labels = "%Y", limits = as.Date(c("2015-08-01","2019-11-01"))) +
scale_y_discrete(
breaks = c("Morphine", "Fentanyl", "Tapentadol", "Methadone", "Oxycodone", "Hydromorphone")) +
labs(x="Date", y="Medication", legend = "Medication") +
scale_fill_viridis_c(option = "D") +
coord_cartesian(clip = "off")
# Setup
#Get travel time from google
library(devtools)
#install_github("DerekYves/placement")
library(placement)
install_github("DerekYves/placement")
